// Generated by Dagger (https://google.github.io/dagger).
package com.demo.imagesearch.di;

import android.app.Activity;
import android.content.Context;
import androidx.lifecycle.ViewModel;
import com.demo.imagesearch.AppController;
import com.demo.imagesearch.AppController_MembersInjector;
import com.demo.imagesearch.network.ApiInterface;
import com.demo.imagesearch.room.AppDatabase;
import com.demo.imagesearch.room.imagedetails.ImageDetailsDao;
import com.demo.imagesearch.ui.base.BaseActivity_MembersInjector;
import com.demo.imagesearch.ui.dashboard.DashboardActivity;
import com.demo.imagesearch.ui.dashboard.ImageDetailsActivity;
import com.demo.imagesearch.ui.dashboard.repository.ImagesRepositoryIml;
import com.demo.imagesearch.ui.dashboard.repository.ImagesRepositoryIml_Factory;
import com.demo.imagesearch.ui.dashboard.viewmodel.DashboardViewModel;
import com.demo.imagesearch.ui.dashboard.viewmodel.DashboardViewModel_Factory;
import com.demo.imagesearch.ui.dashboard.viewmodel.ImageDetailsViewModel;
import com.demo.imagesearch.ui.dashboard.viewmodel.ImageDetailsViewModel_Factory;
import dagger.android.AndroidInjector;
import dagger.android.DispatchingAndroidInjector;
import dagger.android.DispatchingAndroidInjector_Factory;
import dagger.android.support.DaggerAppCompatActivity_MembersInjector;
import dagger.internal.DoubleCheck;
import dagger.internal.InstanceFactory;
import dagger.internal.MapBuilder;
import dagger.internal.MapProviderFactory;
import dagger.internal.Preconditions;
import java.util.Collections;
import java.util.Map;
import javax.inject.Provider;
import okhttp3.OkHttpClient;
import okhttp3.logging.HttpLoggingInterceptor;
import retrofit2.Retrofit;
import retrofit2.converter.gson.GsonConverterFactory;

public final class DaggerAppComponent implements AppComponent {
  private Provider<UiModule_ContributeDashboardActivity.DashboardActivitySubcomponent.Factory>
      dashboardActivitySubcomponentFactoryProvider;

  private Provider<UiModule_ContributeImageDetailsActivity.ImageDetailsActivitySubcomponent.Factory>
      imageDetailsActivitySubcomponentFactoryProvider;

  private Provider<GsonConverterFactory> provideGsonConverterFactoryProvider;

  private Provider<HttpLoggingInterceptor> provideLoggingInterceptorProvider;

  private Provider<AppController> applicationProvider;

  private Provider<Context> provideContextProvider;

  private Provider<OkHttpClient> provideOkHttpClientProvider;

  private Provider<String> provideApiUrlProvider;

  private Provider<Retrofit> provideRetrofitProvider;

  private Provider<ApiInterface> provideApiInterfaceProvider;

  private Provider<ImagesRepositoryIml> imagesRepositoryImlProvider;

  private Provider<DashboardViewModel> dashboardViewModelProvider;

  private Provider<AppDatabase> provideDatabaseProvider;

  private Provider<ImageDetailsDao> provideImageDetailsDaoProvider;

  private Provider<ImageDetailsViewModel> imageDetailsViewModelProvider;

  private Provider<Map<Class<? extends ViewModel>, Provider<ViewModel>>>
      mapOfClassOfAndProviderOfViewModelProvider;

  private Provider<ViewModelFactory> viewModelFactoryProvider;

  private Provider<ActivityComponent.Builder> activityComponentBuilderProvider;

  private DaggerAppComponent(
      AppModule appModuleParam,
      ApiModule apiModuleParam,
      DBModule dBModuleParam,
      AppController applicationParam) {

    initialize(appModuleParam, apiModuleParam, dBModuleParam, applicationParam);
  }

  public static AppComponent.Builder builder() {
    return new Builder();
  }

  private Map<Class<?>, Provider<AndroidInjector.Factory<?>>>
      getMapOfClassOfAndProviderOfAndroidInjectorFactoryOf() {
    return MapBuilder.<Class<?>, Provider<AndroidInjector.Factory<?>>>newMapBuilder(2)
        .put(DashboardActivity.class, (Provider) dashboardActivitySubcomponentFactoryProvider)
        .put(ImageDetailsActivity.class, (Provider) imageDetailsActivitySubcomponentFactoryProvider)
        .build();
  }

  private DispatchingAndroidInjector<Activity> getDispatchingAndroidInjectorOfActivity() {
    return DispatchingAndroidInjector_Factory.newInstance(
        getMapOfClassOfAndProviderOfAndroidInjectorFactoryOf(),
        Collections.<String, Provider<AndroidInjector.Factory<?>>>emptyMap());
  }

  @SuppressWarnings("unchecked")
  private void initialize(
      final AppModule appModuleParam,
      final ApiModule apiModuleParam,
      final DBModule dBModuleParam,
      final AppController applicationParam) {
    this.dashboardActivitySubcomponentFactoryProvider =
        new Provider<UiModule_ContributeDashboardActivity.DashboardActivitySubcomponent.Factory>() {
          @Override
          public UiModule_ContributeDashboardActivity.DashboardActivitySubcomponent.Factory get() {
            return new DashboardActivitySubcomponentFactory();
          }
        };
    this.imageDetailsActivitySubcomponentFactoryProvider =
        new Provider<
            UiModule_ContributeImageDetailsActivity.ImageDetailsActivitySubcomponent.Factory>() {
          @Override
          public UiModule_ContributeImageDetailsActivity.ImageDetailsActivitySubcomponent.Factory
              get() {
            return new ImageDetailsActivitySubcomponentFactory();
          }
        };
    this.provideGsonConverterFactoryProvider =
        DoubleCheck.provider(ApiModule_ProvideGsonConverterFactoryFactory.create(apiModuleParam));
    this.provideLoggingInterceptorProvider =
        DoubleCheck.provider(ApiModule_ProvideLoggingInterceptorFactory.create(apiModuleParam));
    this.applicationProvider = InstanceFactory.create(applicationParam);
    this.provideContextProvider =
        DoubleCheck.provider(
            AppModule_ProvideContextFactory.create(appModuleParam, applicationProvider));
    this.provideOkHttpClientProvider =
        DoubleCheck.provider(
            ApiModule_ProvideOkHttpClientFactory.create(
                apiModuleParam, provideLoggingInterceptorProvider, provideContextProvider));
    this.provideApiUrlProvider =
        DoubleCheck.provider(ApiModule_ProvideApiUrlFactory.create(apiModuleParam));
    this.provideRetrofitProvider =
        DoubleCheck.provider(
            ApiModule_ProvideRetrofitFactory.create(
                apiModuleParam,
                provideGsonConverterFactoryProvider,
                provideOkHttpClientProvider,
                provideApiUrlProvider));
    this.provideApiInterfaceProvider =
        DoubleCheck.provider(
            ApiModule_ProvideApiInterfaceFactory.create(apiModuleParam, provideRetrofitProvider));
    this.imagesRepositoryImlProvider =
        ImagesRepositoryIml_Factory.create(provideApiInterfaceProvider);
    this.dashboardViewModelProvider =
        DashboardViewModel_Factory.create(imagesRepositoryImlProvider);
    this.provideDatabaseProvider =
        DoubleCheck.provider(
            DBModule_ProvideDatabaseFactory.create(dBModuleParam, provideContextProvider));
    this.provideImageDetailsDaoProvider =
        DoubleCheck.provider(
            DBModule_ProvideImageDetailsDaoFactory.create(dBModuleParam, provideDatabaseProvider));
    this.imageDetailsViewModelProvider =
        ImageDetailsViewModel_Factory.create(provideImageDetailsDaoProvider);
    this.mapOfClassOfAndProviderOfViewModelProvider =
        MapProviderFactory.<Class<? extends ViewModel>, ViewModel>builder(2)
            .put(DashboardViewModel.class, (Provider) dashboardViewModelProvider)
            .put(ImageDetailsViewModel.class, (Provider) imageDetailsViewModelProvider)
            .build();
    this.viewModelFactoryProvider =
        DoubleCheck.provider(
            ViewModelFactory_Factory.create(mapOfClassOfAndProviderOfViewModelProvider));
    this.activityComponentBuilderProvider =
        new Provider<ActivityComponent.Builder>() {
          @Override
          public ActivityComponent.Builder get() {
            return new ActivityComponentBuilder();
          }
        };
  }

  @Override
  public AppController inject(AppController app) {
    return injectAppController(app);
  }

  private AppController injectAppController(AppController instance) {
    AppController_MembersInjector.injectActivityInjector(
        instance, getDispatchingAndroidInjectorOfActivity());
    return instance;
  }

  private static final class Builder implements AppComponent.Builder {
    private AppController application;

    @Override
    public Builder application(AppController application) {
      this.application = Preconditions.checkNotNull(application);
      return this;
    }

    @Override
    public AppComponent build() {
      Preconditions.checkBuilderRequirement(application, AppController.class);
      return new DaggerAppComponent(new AppModule(), new ApiModule(), new DBModule(), application);
    }
  }

  private final class DashboardActivitySubcomponentFactory
      implements UiModule_ContributeDashboardActivity.DashboardActivitySubcomponent.Factory {
    @Override
    public UiModule_ContributeDashboardActivity.DashboardActivitySubcomponent create(
        DashboardActivity arg0) {
      Preconditions.checkNotNull(arg0);
      return new DashboardActivitySubcomponentImpl(arg0);
    }
  }

  private final class DashboardActivitySubcomponentImpl
      implements UiModule_ContributeDashboardActivity.DashboardActivitySubcomponent {
    private DashboardActivitySubcomponentImpl(DashboardActivity arg0) {}

    private DispatchingAndroidInjector<Object> getDispatchingAndroidInjectorOfObject() {
      return DispatchingAndroidInjector_Factory.newInstance(
          DaggerAppComponent.this.getMapOfClassOfAndProviderOfAndroidInjectorFactoryOf(),
          Collections.<String, Provider<AndroidInjector.Factory<?>>>emptyMap());
    }

    @Override
    public void inject(DashboardActivity arg0) {
      injectDashboardActivity(arg0);
    }

    private DashboardActivity injectDashboardActivity(DashboardActivity instance) {
      DaggerAppCompatActivity_MembersInjector.injectAndroidInjector(
          instance, getDispatchingAndroidInjectorOfObject());
      BaseActivity_MembersInjector.injectViewModelFactory(
          instance, DaggerAppComponent.this.viewModelFactoryProvider.get());
      BaseActivity_MembersInjector.injectActivityComponentProvider(
          instance, DaggerAppComponent.this.activityComponentBuilderProvider);
      return instance;
    }
  }

  private final class ImageDetailsActivitySubcomponentFactory
      implements UiModule_ContributeImageDetailsActivity.ImageDetailsActivitySubcomponent.Factory {
    @Override
    public UiModule_ContributeImageDetailsActivity.ImageDetailsActivitySubcomponent create(
        ImageDetailsActivity arg0) {
      Preconditions.checkNotNull(arg0);
      return new ImageDetailsActivitySubcomponentImpl(arg0);
    }
  }

  private final class ImageDetailsActivitySubcomponentImpl
      implements UiModule_ContributeImageDetailsActivity.ImageDetailsActivitySubcomponent {
    private ImageDetailsActivitySubcomponentImpl(ImageDetailsActivity arg0) {}

    private DispatchingAndroidInjector<Object> getDispatchingAndroidInjectorOfObject() {
      return DispatchingAndroidInjector_Factory.newInstance(
          DaggerAppComponent.this.getMapOfClassOfAndProviderOfAndroidInjectorFactoryOf(),
          Collections.<String, Provider<AndroidInjector.Factory<?>>>emptyMap());
    }

    @Override
    public void inject(ImageDetailsActivity arg0) {
      injectImageDetailsActivity(arg0);
    }

    private ImageDetailsActivity injectImageDetailsActivity(ImageDetailsActivity instance) {
      DaggerAppCompatActivity_MembersInjector.injectAndroidInjector(
          instance, getDispatchingAndroidInjectorOfObject());
      BaseActivity_MembersInjector.injectViewModelFactory(
          instance, DaggerAppComponent.this.viewModelFactoryProvider.get());
      BaseActivity_MembersInjector.injectActivityComponentProvider(
          instance, DaggerAppComponent.this.activityComponentBuilderProvider);
      return instance;
    }
  }

  private final class ActivityComponentBuilder implements ActivityComponent.Builder {
    private Activity activity;

    @Override
    public ActivityComponentBuilder activity(Activity activity) {
      this.activity = Preconditions.checkNotNull(activity);
      return this;
    }

    @Override
    public ActivityComponent build() {
      Preconditions.checkBuilderRequirement(activity, Activity.class);
      return new ActivityComponentImpl(activity);
    }
  }

  private final class ActivityComponentImpl implements ActivityComponent {
    private ActivityComponentImpl(Activity activity) {}
  }
}
