// Generated by Dagger (https://google.github.io/dagger).
package com.demo.imagesearch.di;

import android.content.Context;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import javax.inject.Provider;
import okhttp3.OkHttpClient;
import okhttp3.logging.HttpLoggingInterceptor;

public final class ApiModule_ProvideOkHttpClientFactory implements Factory<OkHttpClient> {
  private final ApiModule module;

  private final Provider<HttpLoggingInterceptor> loggingInterceptorProvider;

  private final Provider<Context> contextProvider;

  public ApiModule_ProvideOkHttpClientFactory(
      ApiModule module,
      Provider<HttpLoggingInterceptor> loggingInterceptorProvider,
      Provider<Context> contextProvider) {
    this.module = module;
    this.loggingInterceptorProvider = loggingInterceptorProvider;
    this.contextProvider = contextProvider;
  }

  @Override
  public OkHttpClient get() {
    return provideOkHttpClient(module, loggingInterceptorProvider.get(), contextProvider.get());
  }

  public static ApiModule_ProvideOkHttpClientFactory create(
      ApiModule module,
      Provider<HttpLoggingInterceptor> loggingInterceptorProvider,
      Provider<Context> contextProvider) {
    return new ApiModule_ProvideOkHttpClientFactory(
        module, loggingInterceptorProvider, contextProvider);
  }

  public static OkHttpClient provideOkHttpClient(
      ApiModule instance, HttpLoggingInterceptor loggingInterceptor, Context context) {
    return Preconditions.checkNotNull(
        instance.provideOkHttpClient(loggingInterceptor, context),
        "Cannot return null from a non-@Nullable @Provides method");
  }
}
